#%%
week_df = pd.read_csv("/Users/hungyanyi/Documents/GitHub/predict_drought/data/week_score.csv")
week_df
# %%
week_df.columns
week_df.describe()

#%%
from sklearn.model_selection import train_test_split
y = week_df['score']
X = week_df.drop(columns=['fips', 'date', 'score'])

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42, stratify = y)
X_train.head()



#%%

#Scale

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


# %%
from sklearn.linear_model import SGDClassifier
sgdc = SGDClassifier(loss='log', alpha=0.0001)
sgdc.fit(X_train, y_train)


y_test_pred = sgdc.predict(X_test)

y_train_pred = sgdc.predict(X_train)

#%%
from sklearn.metrics import classification_report
print(classification_report(y_test, y_test_pred))
print(classification_report(y_train, y_train_pred))

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, y_test_pred))
print(accuracy_score(y_train, y_train_pred))

# %%
from sklearn.model_selection import GridSearchCV

parameters = {'alpha': np.linspace(.0001, .1, 10)}

print(parameters)
search = GridSearchCV(sgdc, param_grid = parameters, n_jobs=-1, scoring = 'f1_macro')
search.fit(X_train, y_train)

print(search.best_score_)
print(search.best_params_)


#%%

#from sklearn.model_selection import cross_val_score
#print(cross_val_score(sgdc, X, y, cv=5, scoring = 'f1_macro'))

# %%

from sklearn.preprocessing import label_binarize
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
import numpy as np
from itertools import cycle
from scipy import interp

y_proba_test = sgdc.predict_proba(X_test)
y_test_bin = label_binarize(y_test, classes=[0,1,2,3,4,5])

# Compute ROC curve and ROC area for each class

n_classes = 6

fpr = dict()
tpr = dict()
roc_auc = dict()

for i in range(n_classes):
    fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], y_proba_test[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

# # Compute micro-average ROC curve and ROC area
fpr["micro"], tpr["micro"], _ = roc_curve(y_test_bin.ravel(), y_proba_test.ravel())
roc_auc["micro"] = auc(fpr["micro"], tpr["micro"])

# First aggregate all false positive rates
all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))

# Then interpolate all ROC curves at this points
mean_tpr = np.zeros_like(all_fpr)
for i in range(n_classes):
    mean_tpr += interp(all_fpr, fpr[i], tpr[i])

# Finally average it and compute AUC
mean_tpr /= n_classes

fpr["macro"] = all_fpr
tpr["macro"] = mean_tpr
roc_auc["macro"] = auc(fpr["macro"], tpr["macro"])

# Plot all ROC curves
plt.figure()
lw = 2
plt.plot(fpr["micro"], tpr["micro"],
         label='micro-average (area = {0:0.2f})'
               ''.format(roc_auc["micro"]),
         color='deeppink', linestyle=':', linewidth=4)

plt.plot(fpr["macro"], tpr["macro"],
         label='macro-average (area = {0:0.2f})'
               ''.format(roc_auc["macro"]),
         color='navy', linestyle=':', linewidth=4)

colors = cycle(['aqua', 'darkorange', 'cornflowerblue','slateblue', 'purple', 'darkgreen'])
for i, color in zip(range(n_classes), colors):
    plt.plot(fpr[i], tpr[i], color=color, lw=lw,
             label='class {0} (area = {1:0.2f})'
             ''.format(i, roc_auc[i]))

plt.plot([0, 1], [0, 1], 'k--', lw=lw)
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc="lower right")
plt.tight_layout()
plt.show()
# %%

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, y_test_pred))
print(accuracy_score(y_train, y_train_pred))


#%%

from sklearn.metrics import confusion_matrix
#%%

#Final table:

print('best parameters {}'.format(search.best_params_))
print(' ')
print('accuracy score of training set: {}'.format(accuracy_score(y_train, y_train_pred)))
print('accuracy score of testing set: {}'.format(accuracy_score(y_test, y_test_pred)))
print(' ')
print(classification_report(y_test, y_test_pred))
print(' ')
print(confusion_matrix(y_test, y_test_pred))
# %%
